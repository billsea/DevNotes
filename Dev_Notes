// Git commands

Create Repository from local directory:
(navigate to directory)
git init

Clone a Repo:
git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY

Get Status on current branch:
git status

Change branch:
git checkout branch_name

Pull a branch and checkout:
git checkout -b branch_name  origin/branch_name
Example:
git checkout -b release_branch_1_0_0 origin/release/1.0.0

Push new branch:
git push origin newFeatureBranch

Delete local branch:
git branch -d the_local_branch

Commit
git commit -m “the message“

Diff
git diff: Show differences between your working directory and the index.
git diff –cached: Show differences between the index and the most recent commit.
git diff HEAD: Show the differences between your working directory and the most recent commit.

Conflict resolve:
use merge tool (Git merge tool)(Note: after conflicts are resolved run: git clean -f -d (to clean up backup files, see below)

Clean up:
Don’t check it temp files from conflict, such as:
*.orig
_BACKUP_
_BASE_
_LOCAL_
_REMOTE_

Do a "git clean -f -d" from the command line to clean them up after solving conflicts.

To pull submodule: 
git submodule update
git submodule update —-Init

Stash
git stash list (to view stashes)
git stash ( to stash files)
git stash apply (apply last stash)
To apply a specific file use: 
	git checkout stash@{0} <full file path>

Show local branches:
git branch
* master

Remove file from working tree(this will undo a modified file)
git update-index --assume-unchanged file

show remote branches:
git branch -r
git remote show origin

Create the new local branch “newFeatureBranch” from Develop:
git checkout Develop
git branch feature/newFeatureBranch
git checkout feature/newFeatureBranch

Add files to staging
(git add .) for all files
(git add file/is/here)

Remove all from staging
git reset HEAD -- .

Ignore:
add .gitignore file to working directory(project root, not git directory)
Use: touch .gitignore
add file name or for directory add "DirectoryName/"

Common gitignore for xcode:
#ignore files
.DS_Store
Build
xcuserdata
*.xccheckout
*.xcscmblueprint
Pods/



Remove changes to a single file
git checkout path/to/file

After pull, commit merge when prompted
Leave the existing message, then to save, do this:
-press "esc"
- enter “:”
-write ":wq" 
- enter

Push
Git push


Git Tag:
git tag -d <tagname> //Line 1 removes the tag in local env.
git push origin :refs/tags/<tagname> //Line 2 removes the tag in remote env.
git tag <tagname> <commitId> //Line 3 adds the tag to different commit
git push origin <tagname> //Line 4 pushes the change to the remote


Git Bisect:
To pinpoint a commit that introduced a bug.
$ git bisect start
$ git bisect bad                 # Current version is bad
$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good

Git Rebase:
- This will base "feature_branch" on the latest master
So, After pulling current master, do:
git checkout feature_branch
git rebase master

Rebase merge conflicts(local/remote example):
git checkout A
git rebase   B    # rebase A on top of B
local is B (rebase onto),
remote is A

// interactive rebase (will display commits and other options)
git rebase -i master

// Rebase example
1.	On branch master, git checkout -b user_story_1.
2.	Make changes to user_story_1.
3.	Open PR for user_story_1.
4.	On branch user_story_1, git checkout -b user_story_2.
5.	Make changes to user_story_2.
6.	Once user_story_1 gets merged into master, switch to user_story_2 and do git rebase -i master.
7.	This should show you a list of commits on user_story_2 that you want to include in the rebase. 


// Build Debug 
To debug a Jenkins build failure, for example:
./check_target.rb:42:in `block in <main>': undefined method `[]' for nil:NilClass (NoMethodError)
	from ./check_target.rb:41:in `each'
////////////////////Shell Commands ///////////////////////
sudo find /path  -name ‘file_name.png’  //search for file path as super user
sudo find /  -name ‘*.png’ //search from root as super user
sudo find .  -name ‘*.png’ //search current directory

//Grep
Search:
(r=recursive, i = ignore case):
grep -r -i ‘search_text’ /

view processes:
ps aux | grep -i git(to see git processes)

to stop process:
kill <process id>


// Xcode Debugging 
-  When getting exception without symbolicated stack trace(i.e. *** First throw call stack:
(0x2e65af83 0x39141ccf 0x2e594f0d 0x32ea05 0x3), add an Exception Breakpoint (using the + at the bottom of the Breakpoint Navigator) andadd the action bt to it (click the Add Action button, select Debugger Command, enter "bt”(to display current stack trace) or “po $arg1” in the text field). This will display the stack trace as soon as an exception is thrown.


// Breakpoints
Symbolic breakpoint(add method to symbol field to break. “bt” to show backtrace in console)

Exception breakpoint: breaks on exception 


